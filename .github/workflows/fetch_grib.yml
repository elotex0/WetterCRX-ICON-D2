name: Fetch ICON-D2 GRIB2 and Generate PNGs

on:
  workflow_dispatch:

jobs:
  fetch_and_generate:
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.set_run_date.outputs.run }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'


      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Set RUN and DATE
        id: set_run_date
        run: |
          HOUR=$(date -u +%H)
          case $HOUR in
            00|01|02|03) RUN=00 ;;
            04|05|06) RUN=03 ;;
            07|08|09) RUN=06 ;;
            10|11|12) RUN=09 ;;
            13|14|15) RUN=12 ;;
            16|17|18) RUN=15 ;;
            19|20|21) RUN=18 ;;
            22|23) RUN=21 ;;
          esac
          DATE=$(date -u +%Y%m%d)
          # set env variables
          echo "RUN=$RUN" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV
          # set step output for job output
          echo "run=$RUN" >> $GITHUB_OUTPUT

      - name: Download t2m GRIB2 files
        run: |
          mkdir -p data/t2m
          cd data/t2m
          seq 0 47 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {})
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/t_2m/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_t_2m.grib2.bz2"
            wget -O t2m_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "t2m_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f t2m_${i_padded}.grib2.bz2
            fi
          '
      
      - name: Download ww GRIB2 files
        run: |
          mkdir -p data/ww
          cd data/ww
          seq 1 48 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {})
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/ww/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_ww.grib2.bz2"
            wget -O ww_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "ww_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f ww_${i_padded}.grib2.bz2
            fi
          '
      
      - name: Download tp GRIB2 files
        run: |
          mkdir -p data/tp
          cd data/tp
          seq 0 47 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {})
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/tot_prec/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_tot_prec.grib2.bz2"
            wget -O tot_prec_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "tot_prec_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f tot_prec_${i_padded}.grib2.bz2
            fi
          '

      - name: Download CAPE_ML GRIB2 files
        run: |
          mkdir -p data/cape_ml
          cd data/cape_ml
          seq 0 47 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {})
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/cape_ml/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_cape_ml.grib2.bz2"
            wget -O cape_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "cape_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f cape_${i_padded}.grib2.bz2
            fi
          '

      - name: Download DBZ_CMAX GRIB2 files
        run: |
          mkdir -p data/dbz_cmax
          cd data/dbz_cmax
          seq 0 47 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {})
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/dbz_cmax/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_dbz_cmax.grib2.bz2"
            wget -O dbz_cmax_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "dbz_cmax_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f dbz_cmax_${i_padded}.grib2.bz2
            fi
          '
      - name: Download vmax_10m GRIB2 files
        run: |
          mkdir -p data/wind
          cd data/wind
          seq 0 47 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {} )
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/vmax_10m/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_vmax_10m.grib2.bz2"
            wget -O wind_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "wind_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f wind_${i_padded}.grib2.bz2
            fi
          '
          
      - name: Download sde GRIB2 files
        run: |
          mkdir -p data/snow
          cd data/snow
          seq 0 47 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {} )
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/h_snow/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_h_snow.grib2.bz2"
            wget -O snow_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "snow_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f snow_${i_padded}.grib2.bz2
            fi
          '
      - name: Download clct GRIB2 files
        run: |
          mkdir -p data/cloud
          cd data/cloud
          seq 0 47 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {} )
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/clct/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_clct.grib2.bz2"
            wget -O cloud_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "cloud_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f cloud_${i_padded}.grib2.bz2
            fi
          '
      - name: Download twater GRIB2 files
        run: |
          mkdir -p data/twater
          cd data/twater
          seq 0 47 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {} )
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/twater/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_twater.grib2.bz2"
            wget -O twater_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "twater_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f twater_${i_padded}.grib2.bz2
            fi
          '

      - name: Download snowfall GRIB2 files
        run: |
          mkdir -p data/snowfall
          cd data/snowfall
          seq 0 47 | xargs -n 1 -P 12 -I{} bash -c '
            i_padded=$(printf "%03d" {} )
            URL="https://opendata.dwd.de/weather/nwp/icon-d2/grib/${{ env.RUN }}/snowlmt/icon-d2_germany_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i_padded}_2d_snowlmt.grib2.bz2"
            wget -O snowfall_${i_padded}.grib2.bz2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
            if [ -f "snowfall_${i_padded}.grib2.bz2" ]; then
              bunzip2 -f twater_${i_padded}.grib2.bz2
            fi
          '
          
      - name: Upload GRIB2 as artifact
        uses: actions/upload-artifact@v4
        with:
          name: grib2
          path: data/

      - name: Delete GRIB2 files (local cleanup)
        run: rm -rf data/


  generate_pngs:
    runs-on: ubuntu-latest
    needs: fetch_and_generate
    strategy:
      matrix:
        variable: [t2m, ww, tp, tp_acc, wind, snow, cape_ml, dbz_cmax, cloud, twater, snowfall]
      max-parallel: 11
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download GRIB2 artifact
        uses: actions/download-artifact@v4
        with:
          name: grib2
          path: data/

      - name: Generate PNGs for ${{ matrix.variable }}
        run: |
          mkdir -p icond2/${{ matrix.variable }}
          input_dir="data/${{ matrix.variable }}"
          if [ "${{ matrix.variable }}" = "tp_acc" ]; then
            input_dir="data/tp"
          fi
          python scripts/generate_pngs.py \
            "$input_dir" \
            icond2/${{ matrix.variable }} \
            ${{ matrix.variable }}


      - name: Upload PNGs artifact
        uses: actions/upload-artifact@v4
        with:
          name: icond2-${{ matrix.variable }}
          path: icond2/${{ matrix.variable }}

  deploy_to_r2:
    runs-on: ubuntu-latest
    needs: [fetch_and_generate, generate_pngs]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Download all PNGs artifact
        uses: actions/download-artifact@v4
        with:
          pattern: icond2-*
          path: icond2_raw

      - name: Merge PNG folders into one structure
        run: |
          mkdir -p icond2/${{ needs.fetch_and_generate.outputs.run }}
          for d in icond2_raw/*; do
            if [ -d "$d" ]; then
              varname=$(basename "$d" | sed 's/^icond2-//')  # entfernt "icond2-" Prefix
              mkdir -p icond2/${{ needs.fetch_and_generate.outputs.run }}/"$varname"
              cp -r "$d"/* icond2/${{ needs.fetch_and_generate.outputs.run }}/"$varname"/ || true
            fi
          done

      - name: Generate Metadata
        run: |
          python scripts/generate_metadata.py icond2/${{ needs.fetch_and_generate.outputs.run }} ${{ needs.fetch_and_generate.outputs.run }} ${{ env.DATE }}

      - name: Clean old runs on R2 except current
        run: |
          for run_folder in $(aws s3 ls s3://${{ secrets.R2_BUCKET }}/icon-d2/ --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com | awk '{print $2}' | sed 's#/##'); do
            if [ "$run_folder" != "${{ needs.fetch_and_generate.outputs.run }}/" ]; then
              aws s3 rm s3://${{ secrets.R2_BUCKET }}/icon-d2/$run_folder --recursive --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}

      - name: Upload current run and metadata.json to R2
        run: |
          # Upload run folder
          aws s3 sync ./icond2/${{ needs.fetch_and_generate.outputs.run }}/ s3://${{ secrets.R2_BUCKET }}/icon-d2/${{ needs.fetch_and_generate.outputs.run }}/ \
            --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com

          # Upload metadata.json outside run folder
          aws s3 cp ./icond2/metadata.json s3://${{ secrets.R2_BUCKET }}/icon-d2/metadata.json \
            --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
